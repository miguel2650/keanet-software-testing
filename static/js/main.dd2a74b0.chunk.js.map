{"version":3,"sources":["components/CellPhonesTable.js","components/Purchase.js","App.js","serviceWorker.js","index.js"],"names":["CellPhonesTable","props","useState","selectedPhone","setSelectedPhone","listOfPhones","Object","keys","priceList","forEach","phone","index","push","key","value","Fragment","size","length","id","style","width","onChange","e","target","onClick","selectCellPhone","deselectCellPhone","cellPhones","map","Purchase","includeInternet","input","TypeError","setState","internetConnection","price","state","addPhoneLine","phoneLines","Error","removePhoneLine","modelName","newList","includes","indexOf","splice","buying","buyMessage","counts","i","type","max","min","onPaste","window","alert","preventDefault","onKeyDown","onAuxClick","this","confirm","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd2a74b0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction CellPhonesTable(props) {\n  const [selectedPhone, setSelectedPhone] = useState();\n\n  // Contains <option> html elements\n  let listOfPhones = [];\n\n  Object.keys(props.priceList).forEach((phone, index) => {\n    listOfPhones.push(\n      <option key={phone + index} value={phone}>\n        {phone}\n      </option>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <label>Cell phones</label>\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <select\n                size={listOfPhones.length}\n                id=\"cellPhones\"\n                style={{ width: 200 }}\n                onChange={e => setSelectedPhone(e.target.value)}\n              >\n                {listOfPhones}\n              </select>\n            </td>\n            <td>\n              <button onClick={() => props.selectCellPhone(selectedPhone)}>\n                &gt;\n              </button>\n              <br></br>\n              <button onClick={() => props.deselectCellPhone(selectedPhone)}>\n                &lt;\n              </button>\n            </td>\n            <select\n              size={listOfPhones.length}\n              id=\"selectedPhones\"\n              style={{ width: 200 }}\n              onChange={e => setSelectedPhone(e.target.value)}\n            >\n              {props.cellPhones.map((value, index) => (\n                <option key={value + index} value={value}>\n                  {value}\n                </option>\n              ))}\n            </select>\n          </tr>\n        </tbody>\n      </table>\n    </React.Fragment>\n  );\n}\n\nexport default CellPhonesTable;\n","import React from \"react\";\nimport CellPhonesTable from \"./CellPhonesTable\";\n\nclass Purchase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      internetConnection: false,\n      phoneLines: 0,\n      cellPhones: [],\n      price: 0\n    };\n  }\n\n  priceList = {\n    \"Motorola G99\": 800,\n    \"iPhone 99\": 6000,\n    \"Samsung Galaxy 99\": 1000,\n    \"Sony Xperia 99\": 900,\n    \"Huawei 99\": 900\n  };\n\n  includeInternet = input => {\n    if (typeof input !== \"boolean\") {\n      return () => {\n        throw new TypeError(\"Wrong type\");\n      };\n    } else {\n      this.setState({ internetConnection: input });\n      if (input) {\n        this.setState({ price: this.state.price + 200 });\n        return this.state.price;\n      } else {\n        this.setState({ price: this.state.price - 200 });\n        return this.state.price;\n      }\n    }\n  };\n\n  addPhoneLine = () => {\n    if (this.state.phoneLines >= 8) {\n      return () => {\n        throw new Error(\"Can not exceed value of 8\");\n      };\n    } else {\n      this.setState({\n        phoneLines: this.state.phoneLines + 1\n      });\n      this.setState({\n        price: this.state.price + 150\n      });\n    }\n  };\n\n  removePhoneLine = () => {\n    if (this.state.phoneLines <= 0) {\n      return () => {\n        throw new Error(\"Can not subceed value of 0\");\n      };\n    } else {\n      this.setState({ phoneLines: this.state.phoneLines - 1 });\n      this.setState({ price: this.state.price - 150 });\n    }\n  };\n\n  selectCellPhone = modelName => {\n    if (typeof modelName !== \"string\") {\n      return () => {\n        throw new TypeError(\"Wrong type\");\n      };\n    } else {\n      if (modelName in this.priceList) {\n        const newList = [...this.state.cellPhones];\n        newList.push(modelName);\n        this.setState({ cellPhones: newList });\n        this.setState({ price: this.state.price + this.priceList[modelName] });\n      }\n    }\n    return this.state.price;\n  };\n\n  deselectCellPhone = modelName => {\n    if (typeof modelName !== \"string\") {\n      return () => {\n        throw new TypeError(\"Wrong type\");\n      };\n    } else {\n      if (this.state.cellPhones.includes(modelName)) {\n        const newList = [...this.state.cellPhones];\n        const index = newList.indexOf(modelName);\n        newList.splice(index, 1);\n        this.setState({ cellPhones: newList });\n        this.setState({ price: this.state.price - this.priceList[modelName] });\n      }\n    }\n    return this.state.price;\n  };\n\n  buying = () => {\n    if (this.state.price <= 0) {\n      return \"Please select some items before checking out\";\n    } else {\n      let buyMessage = \"\";\n      if (this.state.internetConnection) {\n        buyMessage += \"1x Internet Connection = 200 DKK (monthly) \\n\";\n      }\n      if (this.state.phoneLines > 0) {\n        buyMessage += `${this.state.phoneLines}x Phone Lines = ${\n          this.state.phoneLines * 150\n        } DKK (monthly)\\n`;\n      }\n      if (this.state.cellPhones.length > 0) {\n        var counts = {};\n        for (var i = 0; i < this.state.cellPhones.length; i++) {\n          counts[this.state.cellPhones[i]] =\n            1 + (counts[this.state.cellPhones[i]] || 0);\n        }\n        for (const phone in counts) {\n          buyMessage += `${counts[phone]}x ${phone} = ${\n            counts[phone] * this.priceList[phone]\n          } DKK \\n`;\n        }\n      }\n      buyMessage += ` \\n You bought for a total of: ${this.state.price} DKK \\n`;\n      return buyMessage;\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>KEANet</h1>\n        <input\n          id=\"includeInternet\"\n          type=\"checkbox\"\n          onClick={() => this.includeInternet(!this.state.internetConnection)}\n        ></input>\n        <label>Internet Connection</label>\n        <br></br>\n        <label>Phone Lines </label>\n        <input\n          id=\"phoneLines\"\n          type=\"number\"\n          max=\"8\"\n          min=\"0\"\n          onPaste={e => {\n            window.alert(\"Please do not paste...\");\n            e.preventDefault();\n          }}\n          onKeyDown={e => e.preventDefault()}\n          onAuxClick={() =>\n            window.alert(\n              \"Please use the arrows instead of trying to break the system\"\n            )\n          }\n          onChange={e => {\n            if (e.target.value > this.state.phoneLines) {\n              this.addPhoneLine();\n            } else {\n              this.removePhoneLine();\n            }\n          }}\n        ></input>\n        <br></br>\n        <CellPhonesTable\n          selectCellPhone={this.selectCellPhone}\n          deselectCellPhone={this.deselectCellPhone}\n          cellPhones={this.state.cellPhones}\n          priceList={this.priceList}\n        ></CellPhonesTable>\n        <label>Total price: {this.state.price} DKK</label>\n        <br></br>\n        <button\n          onClick={() => {\n            window.confirm(this.buying());\n          }}\n        >\n          Buy\n        </button>\n      </React.Fragment>\n    );\n  }\n}\nexport default Purchase;\n","import React from \"react\";\nimport Purchase from \"./components/Purchase\";\n\nfunction App() {\n  return <Purchase></Purchase>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}